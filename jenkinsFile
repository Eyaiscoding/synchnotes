pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID= credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME= credentials('ECR_REPO')
        AWS_DEFAULT_REGION= 'us-east-1'
        REPOSITORY_URI='${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()    
            }
        }
        stage('Checkout From Git') {
            steps {
                git branch: 'master', url: 'https://github.com/Eyaiscoding/synchnotes.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('SonarQube-Server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -X -Dsonar.projectName=synchnotes-1 \
                    -Dsonar.projectKey=synchnotes-1'''
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                  waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('TRIVY FS SCAN') {
             steps {
                 sh "trivy fs . > trivyfs.txt"
             }
         }
        
        stage("Docker Image Build") {
            steps {
                script {
                    
                sh 'docker system prune -f'
                sh 'docker container prune -f'
                sh 'docker build -t ${AWS_ECR_REPO_NAME}:latest .'
                
                }
            }
            
        }
        
        stage ("Trivy Scan Image"){
            steps {
                sh 'trivy image ${AWS_ECR_REPO_NAME} > trivyimage-backend-job-${BUILD_NUMBER}-${BUILD_ID}.txt'
            }
        }
        
        stage("ECR Image pushing") {
            steps {
                script {
                    sh '''aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com'''
                    sh '''docker tag synchnotes:latest 161272974421.dkr.ecr.us-east-1.amazonaws.com/synchnotes:${BUILD_NUMBER}'''
                    sh '''docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/synchnotes:${BUILD_NUMBER}'''
                }       
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "synchnotes"
                GIT_USER_NAME = "Eyaiscoding"
            }
            steps {
                dir('/home/ubuntu/synchnotes/Manifests') {
                    withCredentials([string(credentialsId: 'Github-synchnotes-token', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email eyaabidi1234@gmail.com
                            git config user.name "Eya Abidi"
                            git config --list
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=synchnotes:)[^ ]+' Deployment.yml)
                            echo $imageTag
                            sed -i --debug "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:$BUILD_NUMBER/" Deployment.yml
                            git add Deployment.yml
                            git pull --rebase --autostash origin master
                            git add . 
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"          
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                        '''
                    }
                }
            }
        }

}
}
